[{"content":"在查看或者编写 k8s API 的时候, 经常会看到四个术语 groups versions kinds resources 其中大多数以组合的形式出现, 分别为 GVK GVR, 这两个术语很容易弄混, 接下来讲讲他们的区别.\nGroup 和 Version Group 和 Version 很好理解, 在 k8s 用 yaml 清单部署过服务的都应该看到过这个字段\napiVersion:apps/v1kind:xxxmetadata:上面例子中, apps 就是 group, version 是 v1, 每个 group 可以包含多个 version, 这样的关系可以随着时间的推移, 创建多个不同 version 来兼容更多的 api 改动\n特殊的, 有的资源没有 group, 只有 version, 例如 pod, 这类被称为核心资源组  \n 其中 Alpha 是内测版本, 一般不建议使用, 如 v1alpha1, Beta 是经过测试的相对稳定版, 如 v1beta1, Stable 是正式发布版 如 v1, v2\n Kind 这个字段第一次接触应该是在 yaml 清单, 常见的有 pod, deployment, service 等, 它结合 apiVersion 能确定一个具体的 API 类型, 比如下面的 yaml 清单能定位到一种 API 类型\napiVersion:apps/v1kind:DaemonSetmetadata:name:node-exporter但是有了这个 apiVersion 和 kind , kubectl 如何转化成 http rest 请求发送到 apiServer 的呢? 这就需要用到 Resource 了\nResources 有了 Resource , 搭配 group 和 version, 就能很轻易的知道对应的资源 rest url, 比如 deployment, 它的 apiVersion 是 apps/v1, 就可以查询集群中某个命名空间下的 deployment 列表.\nGET /apis/apps/v1/deployments // 也可以限定命名空间查询 /apis/apps/v1/namespaces/${namespace}/deployments { \u0026quot;kind\u0026quot;: \u0026quot;DeploymentList\u0026quot;, \u0026quot;apiVersion\u0026quot;: \u0026quot;apps/v1\u0026quot;, \u0026quot;metadata\u0026quot;: { \u0026quot;selfLink\u0026quot;: \u0026quot;/apis/apps/v1/namespaces/tke/deployments\u0026quot;, \u0026quot;resourceVersion\u0026quot;: \u0026quot;4819273\u0026quot; }, \u0026quot;items\u0026quot;: [ { \u0026quot;metadata\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;tke-auth-api\u0026quot;, \u0026quot;namespace\u0026quot;: \u0026quot;tke\u0026quot;, \u0026quot;selfLink\u0026quot;: \u0026quot;/apis/apps/v1/namespaces/tke/deployments/tke-auth-api\u0026quot;, \u0026quot;uid\u0026quot;: \u0026quot;28979433-72d2-40d0-8555-038bdd8b95ca\u0026quot;, \u0026quot;resourceVersion\u0026quot;: \u0026quot;1344\u0026quot;, \u0026quot;generation\u0026quot;: 1, \u0026quot;creationTimestamp\u0026quot;: \u0026quot;2021-11-22T08:13:44Z\u0026quot;, \u0026quot;labels\u0026quot;: { \u0026quot;app\u0026quot;: \u0026quot;tke-auth-api\u0026quot; }, \u0026quot;annotations\u0026quot;: { \u0026quot;deployment.kubernetes.io/revision\u0026quot;: \u0026quot;1\u0026quot; }, ... ... 可以发现, resouce 和 kind 区别并不大, 拿上面的例子来说, kind 是 deployment, resource 也是 deployment, 但是光知道 GVK, 只能知道是一个什么类型的 API, 但是知道 GVR, 就能知道具体的资源, 有点类似于面向对象的 类 和 对象 的区别, Kind 类似 User 类, 那么 new User(张三) 就是对应的 Resource 了\n 通常情况下 Kind 和 Resource 是一一对应的, Scale Kind 可能对应很多 Resources：deployments/scale 或者 replicasets/scale, 而且 Resource 始终是小写形式，并且通常情况下是 Kind 的小写\n GVK GVR 互转 编码过程中, 如果遇到这两种类型, 可以通过 RESTMapper 进行互相转换\ntype RESTMapper interface { // KindFor takes a partial resource and returns the single match. Returns an error if there are multiple matches \tKindFor(resource schema.GroupVersionResource) (schema.GroupVersionKind, error) // KindsFor takes a partial resource and returns the list of potential kinds in priority order \tKindsFor(resource schema.GroupVersionResource) ([]schema.GroupVersionKind, error) // ResourceFor takes a partial resource and returns the single match. Returns an error if there are multiple matches \tResourceFor(input schema.GroupVersionResource) (schema.GroupVersionResource, error) // ResourcesFor takes a partial resource and returns the list of potential resource in priority order \tResourcesFor(input schema.GroupVersionResource) ([]schema.GroupVersionResource, error) // RESTMapping identifies a preferred resource mapping for the provided group kind. \tRESTMapping(gk schema.GroupKind, versions ...string) (*RESTMapping, error) // RESTMappings returns all resource mappings for the provided group kind if no \t// version search is provided. Otherwise identifies a preferred resource mapping for \t// the provided version(s). \tRESTMappings(gk schema.GroupKind, versions ...string) ([]*RESTMapping, error) ResourceSingularizer(resource string) (singular string, err error) } ","date":"2021-12-01T11:37:00+08:00","image":"https://ypy.7bao.fun/img/20211201134543.png","permalink":"https://blog.7bao.fun/p/gvk-%E5%92%8C-gvr-%E7%9A%84%E5%8C%BA%E5%88%AB/","title":"GVK 和 GVR 的区别"},{"content":"vscode 配置或快捷键  cmd + j 打开或关闭终端 F12 或 ctrl + ] 跳转到函数定义处 gh 显示鼠标 hover 在当前位置时提示的信息 ctrl + i 前进 ctrl + o 后退 alt + F8 光标定位到当前页面问题代码 cmd + . 快速修复问题代码 ctrl + Enter 水平分屏方式打开文件  vscode json 配置项  Go 语言静态检查配置  staticcheck是针对go的静态检查工具，文档地址 在 setting.json 中过滤掉对应的编号(例如过滤掉 ST1020 和 所有 S1 开头的规则) \u0026#34;go.lintFlags\u0026#34;: [ \u0026#34;-checks\u0026#34;, \u0026#34;all,-ST1020,-S1*\u0026#34; ]     vim 自身按键  {number} + w 向前移动 N 个单词 {number} + b 向后移动 N 个单词 % 跳转到匹配的括号 ctrl + ] + gd 跳转到函数定义处 gh 显示鼠标 hover 在当前位置时提示的信息 {number} + f + {char} 向右移动到第 N 个指定字符处 zt/zz/zb 光标跳转到屏幕的顶/中/底部 {number} + ctrl + E 向上滚屏 {number} + ctrl + Y 向上滚屏 ctrl + c 退出插入模式  vim 插件快捷键  ds\u0026quot; 删除 \u0026ldquo;abc\u0026rdquo; 的双引号 cs\u0026quot;' 替换 \u0026ldquo;abc\u0026rdquo; 为 \u0026lsquo;abc\u0026rsquo; ysw\u0026quot; 添加\u0026quot;\u0026ldquo;给一个单词 S\u0026quot; 选中 abc 的情况下, 给 abc 加上双引号  ","date":"2021-11-17T15:17:01+08:00","permalink":"https://blog.7bao.fun/p/vscode-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/","title":"VsCode 使用技巧"},{"content":"主题类 1. Material Icon Theme  功能说明: 可以给文件夹和文件自动添加 icon, 这个是同类插件中看起来最舒服的 使用说明: 安装完成后即可使用  image.png   2. One Dark Pro  功能说明: vscode 使用人数比较多的主题 使用说明: 安装完成后即可使用\n image.png   3. Darcula IntelliJ Theme  功能说明: 如果你习惯 jetbrains 家的 IDE, 这个 vscode 主题绝对适合你 使用说明: 安装完成后即可使用  image.png   效率类 1. Git Graph  功能说明: 一款 git 可视化插件, 非常好看而且实用 使用说明: 安装完成后即可使用    2. Docker  功能说明: Dockerfile 提示, 管理本地 docker 服务 安装完成后即可使用     \u0026hellip;不定期补充\n ","date":"2021-11-16T20:34:44+08:00","permalink":"https://blog.7bao.fun/p/vscode-%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/","title":"VsCode 插件分享"},{"content":"Map 怎么扩容\n","date":"2021-11-11T16:17:41+08:00","permalink":"https://blog.7bao.fun/p/go-map/","title":"[Go] Map"},{"content":"按照国际惯例, 新的博客有一篇 hello 文章, 一来是测试新博客是否运行正常, 二来是记录下为什么要来建个人博客吧.\n其实, 在 2021 年建个人博客应该不太流行了, 现在国内大部分技术类文章基本上都在博客园或者CSDN 这些社区, 我在刚学 PHP 那会, 就租了 3 年的云服务器建个人博客, 学习 Linux 命令和 LNMP 技术栈后来, 但是限于当时懒+技术理解不深, 比如安装环境, 配置域名, 发表的博客带图片的话加载巨慢,因为当时带宽是买的 1M 的, 还要建一个 Mysql 数据库, 还被黑过一次, 当时用的 root@root 这种弱密码并且放开所有权限等等等等, 后来索性就当 Linux 学习机玩了, 文章在偶尔会在知乎上写写.\n最近这种静态博客特别火, 没有服务器, 只需要一个域名(也可以没有), 就可以建一个自己的后花园, 感觉非常不错, 借助 githubAction 甚至都不用自己打包, 平常空闲了学习了什么, 可以写写当做知识的巩固, 毕竟看过不等于会, 讲得出来才叫会, 顺便锻炼一下自己的表达能力, 我觉得这项技能对开发来说尤为重要.\n","date":"2021-11-11T16:17:41+08:00","permalink":"https://blog.7bao.fun/p/helloblog/","title":"HelloBlog"}]