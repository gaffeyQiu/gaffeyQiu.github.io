<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on gaffey的开发日志</title>
    <link>https://blog.7bao.fun/post/</link>
    <description>Recent content in Posts on gaffey的开发日志</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Dec 2021 22:38:41 +0800</lastBuildDate><atom:link href="https://blog.7bao.fun/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[操作系统实验] ucore 环境准备</title>
      <link>https://blog.7bao.fun/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C-ucore-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link>
      <pubDate>Wed, 22 Dec 2021 22:38:41 +0800</pubDate>
      
      <guid>https://blog.7bao.fun/p/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C-ucore-%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid>
      <description>[实验] ucore 环境准备 环境准备 1. 准备一台装有 ubuntu 操作系统的机器 建议是在虚拟机里面安装一个 ubuntu， 避免对自己机器的影响， 我安装的是当时最新版本ubuntu桌面端
 https://ypy.7bao.fun/img/20211222204823.png 
ps：小豹子挺可爱的
2. 安装环境  gcc: 编译 c++ make: 自动编译或测试代码 gdb: 调试代码 cgdb: 字符方式调试代码 qemu: 调试内核，实验中搭配 cgdb 使用 git: 获取实验所需代码 vscode: 编写代码 vim: 偶尔也会在终端用 vim 查看代码  3. 实验资料 https://github.com/chyyuu/os_course_info
Introduction
Introduction
4. 获取代码 根据实验资料查到项目地址，非常友好的开源了，没有放在清华的内网。
git clone &amp;lt;https://github.com/chyyuu/os_kernel_lab.git 这样获取到的代码默认是 rust 语言实现的，目前我学习的是 c 语言实现，所以切换到 master 分支 （后续实验完成了希望能用 rust 也实现一遍)
git checkout master 5.验证环境 可以参考视频 学堂在线 2.7 演示实验操作过程</description>
    </item>
    
    <item>
      <title>[翻译]How Does a Database Work?</title>
      <link>https://blog.7bao.fun/p/%E7%BF%BB%E8%AF%91how-does-a-database-work/</link>
      <pubDate>Fri, 17 Dec 2021 16:08:41 +0800</pubDate>
      
      <guid>https://blog.7bao.fun/p/%E7%BF%BB%E8%AF%91how-does-a-database-work/</guid>
      <description>数据库是如何工作的?  数据在磁盘或内存中以什么格式保存？ 它什么时候从内存移动到磁盘？//todo 为什么一张表只能有一个主键？ 事务如何回滚？ 索引是如何格式化的？//todo 何时以及如何进行全表扫描？ 准备好的语句保存格式是什么？  简而言之，数据库是如何工作的？
我正在用 C 从头开始构建一个 sqlite 的副本，以便理解，我将在进行的过程中记录我的过程
目录  Part1 -  reference  https://cstack.github.io/db_tutorial
 </description>
    </item>
    
    <item>
      <title>Goland 使用技巧</title>
      <link>https://blog.7bao.fun/p/goland-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Fri, 03 Dec 2021 13:17:01 +0800</pubDate>
      
      <guid>https://blog.7bao.fun/p/goland-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>显示函数的参数 (cmd + p)   实现接口 (ctrl + i) (cmd + n)  
生成测试 (cmd + shift + t) (cmd + n)   在打开的文件之间导航 (ctrl + tab)     最近的文件 (cmd + e)   查看结构体窗口 (cmd + F12)   调用层次接口 (ctrl + alt + h)   显示引用 (alt + F7)   历史剪贴板 (cmd + shift + v)   打开/关闭终端 (alt + F12) 跳转到定义或引用 (cmd + b) 前进/后退 (cmd + [) (cmd + ]) 自动填充结构体 (alt + enter)   快速显示定义 (cmd + y)</description>
    </item>
    
    <item>
      <title>Gin 如何动态生成模型 swagger 文档</title>
      <link>https://blog.7bao.fun/p/gin-%E5%A6%82%E4%BD%95%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B-swagger-%E6%96%87%E6%A1%A3/</link>
      <pubDate>Wed, 01 Dec 2021 19:17:41 +0800</pubDate>
      
      <guid>https://blog.7bao.fun/p/gin-%E5%A6%82%E4%BD%95%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B-swagger-%E6%96%87%E6%A1%A3/</guid>
      <description>在做 API 接口开发时, 一般会统一 API 返回格式, 例如
{ &amp;#34;code&amp;#34;: 200, &amp;#34;data&amp;#34;: { //xxxxx  //xxxxx  }, &amp;#34;message&amp;#34;: &amp;#34;OK&amp;#34; } 在后端代码定义中, 也会定义一个结构体来对应这种结构, 并且, 由于 data 字段里的数据是未知的(与具体业务相关), 所以会定义一个 interface 来接收
type ApiResponse struct { Code int `json:&amp;#34;code&amp;#34;` Msg string `json:&amp;#34;message&amp;#34;` Data interface{} `json:&amp;#34;data&amp;#34;` } 然后根据具体业务响应, 向 data 传入不同的模型, 比如
c.JSON(200, ApiResponse{200, &amp;#34;OK&amp;#34;, User}) 但是这里有个很大的问题, swagger 文档中, 这个接口的返回值该怎么定义?
// @Summary 获取用户信息 // ... // ... // @Success 200 {object} ApiResponse &amp;#34;ok&amp;#34; func GetUser(c *gin.</description>
    </item>
    
    <item>
      <title>GVK 和 GVR 的区别</title>
      <link>https://blog.7bao.fun/p/gvk-%E5%92%8C-gvr-%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Wed, 01 Dec 2021 11:37:00 +0800</pubDate>
      
      <guid>https://blog.7bao.fun/p/gvk-%E5%92%8C-gvr-%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>在查看或者编写 k8s API 的时候, 经常会看到四个术语 groups versions kinds resources 其中大多数以组合的形式出现, 分别为 GVK GVR, 这两个术语很容易弄混, 接下来讲讲他们的区别.
Group 和 Version Group 和 Version 很好理解, 在 k8s 用 yaml 清单部署过服务的都应该看到过这个字段
apiVersion:apps/v1kind:xxxmetadata:上面例子中, apps 就是 group, version 是 v1, 每个 group 可以包含多个 version, 这样的关系可以随着时间的推移, 创建多个不同 version 来兼容更多的 api 改动
特殊的, 有的资源没有 group, 只有 version, 例如 pod, 这类被称为核心资源组  
 其中 Alpha 是内测版本, 一般不建议使用, 如 v1alpha1, Beta 是经过测试的相对稳定版, 如 v1beta1, Stable 是正式发布版 如 v1, v2</description>
    </item>
    
    <item>
      <title>VsCode 使用技巧</title>
      <link>https://blog.7bao.fun/p/vscode-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Wed, 17 Nov 2021 15:17:01 +0800</pubDate>
      
      <guid>https://blog.7bao.fun/p/vscode-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>vscode 配置或快捷键  cmd + j 打开或关闭终端 F12 或 ctrl + ] 跳转到函数定义处 gh 显示鼠标 hover 在当前位置时提示的信息 ctrl + i 前进 ctrl + o 后退 alt + F8 光标定位到当前页面问题代码 cmd + . 快速修复问题代码 ctrl + Enter 水平分屏方式打开文件  vscode json 配置项  Go 语言静态检查配置  staticcheck是针对go的静态检查工具，文档地址 在 setting.json 中过滤掉对应的编号(例如过滤掉 ST1020 和 所有 S1 开头的规则) &amp;#34;go.lintFlags&amp;#34;: [ &amp;#34;-checks&amp;#34;, &amp;#34;all,-ST1020,-S1*&amp;#34; ]     vim 自身按键  {number} + w 向前移动 N 个单词 {number} + b 向后移动 N 个单词 % 跳转到匹配的括号 ctrl + ] + gd 跳转到函数定义处 gh 显示鼠标 hover 在当前位置时提示的信息 {number} + f + {char} 向右移动到第 N 个指定字符处 zt/zz/zb 光标跳转到屏幕的顶/中/底部 {number} + ctrl + E 向上滚屏 {number} + ctrl + Y 向上滚屏 ctrl + c 退出插入模式  vim 插件快捷键  ds&amp;quot; 删除 &amp;ldquo;abc&amp;rdquo; 的双引号 cs&amp;quot;&#39; 替换 &amp;ldquo;abc&amp;rdquo; 为 &amp;lsquo;abc&amp;rsquo; ysw&amp;quot; 添加&amp;quot;&amp;ldquo;给一个单词 S&amp;quot; 选中 abc 的情况下, 给 abc 加上双引号  </description>
    </item>
    
    <item>
      <title>VsCode 插件分享</title>
      <link>https://blog.7bao.fun/p/vscode-%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/</link>
      <pubDate>Tue, 16 Nov 2021 20:34:44 +0800</pubDate>
      
      <guid>https://blog.7bao.fun/p/vscode-%E6%8F%92%E4%BB%B6%E5%88%86%E4%BA%AB/</guid>
      <description>主题类 1. Material Icon Theme  功能说明: 可以给文件夹和文件自动添加 icon, 这个是同类插件中看起来最舒服的 使用说明: 安装完成后即可使用  image.png   2. One Dark Pro  功能说明: vscode 使用人数比较多的主题 使用说明: 安装完成后即可使用
 image.png   3. Darcula IntelliJ Theme  功能说明: 如果你习惯 jetbrains 家的 IDE, 这个 vscode 主题绝对适合你 使用说明: 安装完成后即可使用  image.png   效率类 1. Git Graph  功能说明: 一款 git 可视化插件, 非常好看而且实用 使用说明: 安装完成后即可使用    2. Docker  功能说明: Dockerfile 提示, 管理本地 docker 服务 安装完成后即可使用     &amp;hellip;不定期补充</description>
    </item>
    
    <item>
      <title>HelloBlog</title>
      <link>https://blog.7bao.fun/p/helloblog/</link>
      <pubDate>Thu, 11 Nov 2021 16:17:41 +0800</pubDate>
      
      <guid>https://blog.7bao.fun/p/helloblog/</guid>
      <description>按照国际惯例, 新的博客有一篇 hello 文章, 一来是测试新博客是否运行正常, 二来是记录下为什么要来建个人博客吧.
其实, 在 2021 年建个人博客应该不太流行了, 现在国内大部分技术类文章基本上都在博客园或者CSDN 这些社区, 我在刚学 PHP 那会, 就租了 3 年的云服务器建个人博客, 学习 Linux 命令和 LNMP 技术栈后来, 但是限于当时懒+技术理解不深, 比如安装环境, 配置域名, 发表的博客带图片的话加载巨慢,因为当时带宽是买的 1M 的, 还要建一个 Mysql 数据库, 还被黑过一次, 当时用的 root@root 这种弱密码并且放开所有权限等等等等, 后来索性就当 Linux 学习机玩了, 文章在偶尔会在知乎上写写.
最近这种静态博客特别火, 没有服务器, 只需要一个域名(也可以没有), 就可以建一个自己的后花园, 感觉非常不错, 借助 githubAction 甚至都不用自己打包, 平常空闲了学习了什么, 可以写写当做知识的巩固, 毕竟看过不等于会, 讲得出来才叫会, 顺便锻炼一下自己的表达能力, 我觉得这项技能对开发来说尤为重要.</description>
    </item>
    
  </channel>
</rss>
